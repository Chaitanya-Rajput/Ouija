/*
Connections-

To arduino nano

StepperX : IN1 --> D2
           IN2 --> D3
           IN3 --> D4
           IN4 --> D5

StepperY : IN1 --> D6
           IN2 --> D7
           IN3 --> D8
           IN4 --> D9

StepperZ : IN1 --> D10
           IN2 --> D11
           IN3 --> D12
           IN4 --> D13

SwitchX : 1st End --> 5V
          2nd End --> A0

SwitchY : 1st End --> 5V
          2nd End --> A1

HC-05 : VCC --> 5V
        GND --> GND
        TX --> RX
        RX --> TX
          
*/



//include the libraries
#include <AccelStepper.h>

//define the pin connections and variables
//switches:
#define SWITCH_X A0
#define SWITCH_Y A1

//motors:
#define FullStep 4
#define Step_Per_Revolution 2048

AccelStepper StepperX(FullStep, 2, 4, 3, 5);
AccelStepper StepperY(FullStep, 6, 8, 7, 9);
AccelStepper StepperZ(FullStep, 10, 12, 11, 13);

const int STEPS[8][4] = {
  {1, 0, 0, 0},
  {1, 1, 0, 0},
  {0, 1, 0, 0},
  {0, 1, 1, 0},
  {0, 0, 1, 0},
  {0, 0, 1, 1},
  {0, 0, 0, 1},
  {1, 0, 0, 1}
};

int currentStepX = 0;
int currentStepY = 0;
int currentStepZ = 0;
//Measurements, from home, of the working area, in steps
// will need to adjust
#define Y_MAX 30921
#define X_MAX 18995
#define Z_MAX_STEPS  512   // 905 degrees

/* "NO"   600   5500
   "YES"  600   24600
   A      8800  29000
   B      7200  26500
   C      6500  24000
   D      5500  22000
   E      5200  20000
   F      5100  17500
   G      5000  15500
   H      5000  13500
   I      5000  11000
   J      5500  9000
   K      6000  7000
   L      6800  4500
   M      8300  2300
   N      13200 28300
   O      11600 26400
   P      10600 24400
   Q      9600  22400
   R      8800  20200
   S      8600  17700
   T      8400  15700
   U      8100  13500
   V      8300  11000
   W      9000  8500
   X      10500 6100
   Y      11500 4000
   Z      12800 1800
*/
int current_x = 0;
int current_y = 0;
int current_z = 0; 

struct point {
  int x;
  int y;
};
//10 numbers, in order 0-9
struct point numbers[10] = {
  {18000, 1000},  // 0
  {16500, 3000},  // 1
  {15000, 5000},  // 2
  {13500, 7000},  // 3
  {12000, 9000},  // 4
  {10500, 11000}, // 5
  {9000, 13000},  // 6
  {7500, 15000},  // 7
  {6000, 17000},  // 8
  {4500, 19000}   // 9
};

//26 letters, in order a-z
struct point letters[26] = {
  {8800, 29000},//a
  {7200, 26500},//b
  {6500, 24000},//c
  {5500, 22000},//d
  {5200, 20000},//e
  {5100, 17500},//f
  {5000, 15500},//g
  {5000, 13500},//h
  {5000, 11000},//i
  {5500, 9000},//j
  {6000, 7000},//k
  {6800, 4500},//l
  {8300, 2300},//m
  {13200, 28300},//n
  {11600, 26400},//o
  {10600, 24400},//p
  {9600, 22400},//q
  {8800, 20200},//r
  {8600, 17700},//s
  {8400, 15700},//t
  {8100, 13500},//u
  {8300, 11000},//v
  {9000, 8500},//w
  {10500, 6100},//x
  {11500, 4000},//y
  {12800, 1800}//z
};

String serial_cmd;

void setup() {
  //Limit switches
  pinMode(SWITCH_X, INPUT);
  pinMode(SWITCH_Y, INPUT);

  StepperX.setMaxSpeed(1000);
  StepperX.setAcceleration(100);
  StepperY.setMaxSpeed(1000);
  StepperY.setAcceleration(100);
  StepperZ.setMaxSpeed(400);
  StepperZ.setAcceleration(30);

  //For debugging
  Serial.begin(9600);

  //Home the axes
  move_home();

}


void move_home() {
  StepperX.setSpeed(-400);
  StepperY.SetSpeed(-400);

  Serial.println("Homing the motors")
  //initialize the x-axis motor
  while(digitalRead(SWITCH_X)){
    StepperX.runSpeed();
  }
  StepperX.setCurrentPosition(0);

  //initialize the y-axis motor
  while(digitalRead(SWITCH_Y)){
    StepperY.runSpeed();
  }
  StepperY.setCurrentPosition(0);
  
  Serial.println("Homed the Motors")
}

void move_to(long x, long y, int speed) {

  x = constrain(x, 0, X_MAX);
  y = constrain(y, 0, Y_MAX);

  StepperX.moveTo(x);
  StepperY.moveTo(y);

  StepperX.setSpeed(speed);
  StepperY.setSpeed(speed);

  while (StepperX.distanceToGo() != 0 || StepperY.distanceToGo() != 0){
    StepperX.run();
    StepperY.run();
    step_z_wobble(100);
  }
  
}

void step_z_wobble(int speed) {
  static int z_pos = 0;
  static bool z_dir = true;

  stepperZ.setSpeed(z_dir ? speed : -speed);
  stepperZ.runSpeed();
  z_pos += z_dir ? 1 : -1;

  if (z_pos >= Z_MAX_STEPS || z_pos <= Z_MIN_STEPS) {
    z_dir = !z_dir;
  }
}


void say_string(String msg) {
  for(int i = 0; i < msg.length(); i++){
    char c = msg[i];
    if (c >= 'a' && c<= 'Z'){
      point p = letters[c-'a'];
      move_to(p.x, p.y, 400);
      delay(500);
    }
  }
}

void say_num(String nums) {
  for (int i = 0; i < nums.length(); i++) {
    char c = nums[i];
    if (c >= '0' && c <= '9') {
      point p = numbers[c - '0'];
      move_to(p.x, p.y, 400);
      delay(700);
    }
  }
}

void loop() {

  if (Serial.available()) {
    serial_cmd = Serial.readStringUntil('\n');
    //Previous line would block until we got something, now parse it
    if (serial_cmd.startsWith("s")) {
      String message = serial_cmd.substring(2);
      //Send it back as confirmation
      Serial.println(message);
      say_string(message);

    }
    else if (serial_cmd.startsWith("l")){
      String numberss = serial_cmd.substring(2);
      //Send it back as confirmation
      Serial.println(numberss);
      say_num(numberss);

    }
    else if (serial_cmd.startsWith("m")) {

      int spaceIndex = serial_cmd.indefOf(" ",2);

      //Split on spaces, command is of the form "m xx yy"
      //second and third entries are x and y
      index = serial_cmd.indexOf(" ");
      long x = serial_cmd.substring(2, spaceIndex).toInt();
      long y = serial_cmd.substring(spaceIndex +1 ).toInt();

      //Send it back as confirmation
      Serial.print("Move to ");
      Serial.print(x);
      Serial.print(",");
      Serial.print(y);
      Serial.print(" from ");
      Serial.print(current_x);
      Serial.print(" ");
      Serial.println(current_y);
      if ((current_x == x) && (current_y == y)){
        move_to(current_x + 800, current_y - 800, 100);
        move_to(current_x - 800, current_y + 800, 100);
      }
      else{
      move_to(x, y, 400);
      }
    }

    else if (serial_cmd.startsWith("h")) {
      move_home();
      Serial.println("Moved home");
    }

    else if (serial_cmd.startsWith("y")) {
      if ((current_y == 24600) && (current_x == 600)) {
        //move off and then back on
        move_to(current_x + 800, current_y - 800, 100);
        move_to(current_x - 800, current_y + 800, 100);
      }
      else {
        move_to(600, 24600, 100);
      }
      Serial.println("Move to Yes");
      
    }

    else if (serial_cmd.startsWith("n")) {
      if ((current_y == 5500) && (current_x == 600)) {
        //move off and then back on
        move_to(current_x + 800, current_y - 800, 100);
        move_to(current_x - 800, current_y + 800, 100);
      }
      else {
        move_to(600, 5500, 100);
      }
      Serial.println("Move to No");
    }
    else {
      Serial.print("What even is a ");
      Serial.println(serial_cmd);
    }
  }
}
